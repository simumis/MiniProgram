/** 凝汽器变工况计算，根据凝汽器热负荷、冷却水入口温度、冷却水流量、冷却水比热、管内流速、换热面积、传热系数
 * @param {number} Q - 热负荷，单位：MW
 * @param {number} tw1 - 凝汽器入口冷却水温度，单位：℃
 * @param {number} Gw - 冷却水流量，单位：kg/s
 * @param {number} cp - 冷却水比热，单位：kJ/(kg·℃)
 * @param {number} A - 换热面积，单位：㎡
 * @param {number} K - 总体传热系数，单位：kW/(㎡·℃)
 * @return {凝汽器饱和温度，单位：℃}
 */
function satTemperature(Q, tw1, Gw, cp, A, K) {
	let Gwcp = Gw * cp;
	let x = K * A / Gwcp;
	let ts = tw1 + 1000.0 * Q / (Gwcp * (1.0 - 1.0 / Math.exp(x)))
	return ts;
}

/** 清洁系数计算
 * @param {number} Q - 热负荷，单位：MW
 * @param {number} tw1 - 凝汽器入口冷却水温度，单位：℃
 * @param {number} tw2 - 凝汽器出口冷却水温度，单位：℃
 * @param {number} tw - 凝汽器汽侧饱和温度，单位：℃
 * @param {number} K - 总体传热系数，单位：kW/(㎡·℃)
 * @param {number} K0 - 冷却管基本传热系数，单位：kW/(㎡·℃)
 * @param {number} bt - 冷却水入口温度修正系数
 * @param {number} bm - 管材和管壁厚修正系数
 */
function cleanliness(Q, tw1, tw2, ts, A, K0, bt, bm) {
	if(ts<=tw1 || ts<=tw2 || tw1>=tw2) {
		throw new Error(`温度tw1(${tw1})、tw2(${tw2})或ts(${ts})数据有误，请检查输入数据。`);
	}
	// 对数平均温差
	let dtm = (tw2-tw1) / Math.log((ts-tw1) / (ts-tw2));
	let K = Q * 1000 / A / dtm;
	let bc = K / (K0 * bt * bm);
	return bc;
}

/** 冷却水出口温度计算
 * @param {number} Q - 热负荷，单位：MW
 * @param {number} tw1 - 凝汽器入口冷却水温度，单位：℃
 * @param {number} Gw - 冷却水流量，单位：kg/s
 * @param {number} cp - 冷却水比热，单位：kJ/(kg·℃)
 * @return {number}
 */
function tw2(Q, tw1, Gw, cp) {
	return Q * 1000.0 / Gw / cp +tw1;
}

/** 冷却管内流速计算
 * @param {number} Gw - 冷却水流量，单位：kg/s
 * @param {number} d - 冷却管外径，单位：mm
 * @param {number} m - 冷却管壁厚，单位：mm
 * @param {number} n - 冷却管数量，单位：根
 * @param {number} fn - 流程数 
 * @param {number} rho - 冷却水密度，单位：kg/m³
 * @return {number}
 */
function velocity(Gw, d, m, n, fn=2, rho=1E3) {
	// 冷却管内径，单位：m
	let di = (d - m * 2) / 1000;
	// 冷却管通流截面积，单位：㎡
	let area = Math.PI / 4.0 * di * di;
	// 流道总截面积，单位：㎡
	let total_area = area * n / fn;
	// 冷却水体积流速，单位：m³/s
	let Gv = Gw / rho;
	
	return Gv / total_area;
}

/** 总体传热系数计算
 * @param {number} K0 - 冷却管基本传热系数，单位：kW/(㎡·℃)
 * @param {number} bt - 冷却水入口温度修正系数
 * @param {number} bm - 管材和管壁厚修正系数
 * @param {number} bc - 冷却管清洁系数
 * @return {总体传热系数，单位：kW/(㎡·℃)}
 */
function K(K0, bt, bm, bc) {
	return K0 * bt * bm * bc;
}


/** 冷却管基本传热系数计算 - 壁厚为1.24mm、海军黄铜制作的新管子在循环水入口温度tw1=21℃条件下
 * @param {number} d - 冷却管外径，单位：mm
 * @param {number} v - 冷却管内流速，单位：m/s
 * @return {冷却管基本传热系数，单位：kW/(㎡·℃)}
 */
function K0(d, v) {
	const arg = [[1300.7548815578737, 1570.900300638392, -93.00850792020984, -31.973851008802434, 4.627357020427648, 0.023866271991167056],
 [1254.456450443396, 1604.4436273421484, -133.70451128087294, -19.206446714596904, 3.5382859128715287, -0.040596947183627635],
 [1198.164486107386, 1652.8329442392817, -181.486022006639, -3.6833321603989355, 1.591524853777945, -0.01817484557907755],
 [1138.1846739154898, 1714.1673819801808, -240.21397371015215, 14.544289709017457, -0.4915397967001393, 0.017947498543096112],
 [1172.8338158802983, 1565.6784082035394, -141.79989449821426, -15.409323873974994, 2.808333994692004, -0.01170320546800621],
 [1161.6956713676964, 1520.2513547819954, -117.14487419993416, -25.40404735604566, 4.306674981382618, -0.010752481494106299]];
	let idx;
	if(d>=15.9 && d<=19.1) {
		idx = 0;
	} else if(d>=22.2 && d<=25.4) {
		idx = 1;
	} else if(d>=28.6 && d<=31.8) {
		idx = 2;
	} else if(d>=34.9 && d<=38.1) {
		idx = 3;
	} else if(d>=41.3 && d<=44.5) {
		idx = 4;
	} else if(d>=47.6 && d<=50.8) {
		idx = 5;
	} else {
		throw new Error('输入的管径不在有效范围，请检查输入！');
		return null;
	}
	
	let x = 1.0;
	let sum = 0.0;
	for(let a of arg[idx]) {
		sum += a * x;
		x *= v;
	}
	
	return sum / 1000.0;
}

/** 冷却水入口温度修正系数
 * @param {number} t - 冷却水入口温度，单位：℃
 * @return {冷却水入口温度修正系数}
 */
function bt(t) {
	const arg = [0.669483272, 0.0139073236, 0.00169864294, -0.00039962825, 4.55251723e-05, -2.81536304e-06, 9.86343833e-08, -1.9671625e-09, 2.08770657e-11, -9.16856402e-14];
	let x = 1.0;
	let sum = 0.0;
	for(const a of arg) {
		sum += a * x;
		x *= t;
	}
	return sum;
}


/** 冷却管材料及壁厚修正系数
 * @param {number} index - 冷却管材料代码，见《凝汽器与真空系统运行维护导则》（DL/T 932-2019）附表C.3，自上而下分别为0-6
 * @param {number} m - 冷却管壁厚，单位：mm
 */
function bm(index, m) {
	const arg = [[1.0668002657127746,  -0.09263829846110523,  0.044349107475534416,  -0.011755304067744554],
 [1.0522159616176807,  -0.03992074249832452,  -0.013213986877364548,  0.004420538365799626],
 [1.065782200746421,  -0.146585187253355,  0.04174742467120857,  -0.010088416352090596],
 [1.0395019956994342,  -0.1309931415903608,  -0.0021399249817038225,  0.0029118853338383215],
 [1.0201852022998184,  -0.007522076164154069,  -0.07520193284369224,  0.019329049486832627],
 [1.0722348843621956,  -0.37122252398021666,  0.11694760857964337,  -0.020049779078921998],
 [1.0697304177998823,  -0.27293777191773333,  0.07728646857002605,  -0.013616556356556436]];
	let x = 1.0;
	let sum = 0.0;
	for(let a of arg[index]) {
		sum += a * x;
		x *= m;
	}
	return sum;
}

export {satTemperature, cleanliness, tw2, velocity, K, K0, bt, bm};